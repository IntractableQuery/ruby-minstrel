h1. Ruby Minstrel

Minstrel allows you to wrap every method call for a given class so you can more
easily observe how a class and its methods are being used.

h2. Get it

* gem install minstrel
* or download versions here: http://rubygems.org/gems/minstrel
* or github: https://github.com/jordansissel/ruby-minstrel

h2. Why?

Fun. Also, sometimes ruby-prof and similar tools are overkill when I am trying
to debug or dig into how a piece of code works.

It's a lot like strace/tcpdump/dtrace for ruby, or aims to be, anyway.

I wanted a tool that was useful for my own code as well as for helping
understand and debug other code (puppet, mcollective, rails, activerecord,
sinatra, etc...).

h2. Examples

h3. From the commandline

You can use minstrel to wrap classes with a default 'print' wrapper that simply
prints what is called.  For example:

<pre>
% RUBY_INSTRUMENT=String ruby -rminstrel -e 'puts "hello world".capitalize.reverse'
enter String#capitalize([])
exit String#capitalize([])
enter String#reverse([])
exit String#reverse([])
dlrow olleH
</pre>

h3. The 'minstrel' tool

Since the following doesn't work as expected in ruby 1.8 (or maybe all rubies):
ruby -rrubygems -rminstrel ..., I provide 'minstrel' as a way to run ruby
programs with minstrel preloaded.

<pre>
% cat test.rb                            
#!/usr/bin/env ruby
puts "hello world".capitalize.reverse

% RUBY_INSTRUMENT=String minstrel test.rb
enter String#capitalize([])
exit String#capitalize([])
enter String#reverse([])
exit String#reverse([])
dlrow olleH
</pre>

h4. Example: Tracing puppet storeconfigs (aka Tracing ActiveRecord queries)

ActiveRecord has a base class for most things query-related. Let's trace that:

<pre>
% sudo env RUBY_INSTRUMENT=ActiveRecord::ConnectionAdapters::DatabaseStatements minstrel puppet ...
enter ActiveRecord::ConnectionAdapters::DatabaseStatements#select_all(["SELECT     DISTINCT 
`hosts`.id FROM       `hosts`  LEFT OUTER JOIN `fact_values` ON `fact_values`.`host_id` = `h
osts`.`id` LEFT OUTER JOIN `fact_names` ON `fact_names`.`id` = `fact_values`.`fact_name_id` 
...
enter ActiveRecord::ConnectionAdapters::DatabaseStatements#select_all(["SELECT     `hosts`.`id` AS t0_r0, `hosts`.`name` AS t0_r1, `hosts`.`ip` AS t0_r2, `hosts`.`environment ...
</pre>

So easy :)


h3. From ruby

Boilerplate:

<pre>
require "minstrel"

instrument = Minstrel::Instrument.new()
instrument.wrap(String) do |point, klass, method, *args|
  #  * point is either :enter or :exit depending if this function is about to be
  #    called or has finished being called.
  #  * klass is the class object (String, etc)
  #  * method is the method (a Symbol)
  #  * *args is the arguments passed
end
</pre>

Example:

<pre>
require "minstrel"

class Foo
  def bar(one, &block)
    yield one
  end
  
  def baz
    puts "Baz!"
  end 
end

instrument = Minstrel::Instrument.new
instrument.wrap(Foo) do |point, klass, method, *args|
  puts "#{point} #{klass.name}##{method}(#{args.inspect})"
end

foo = Foo.new
foo.bar(123) { |arg| puts arg }
foo.baz
</pre>

Output:

<pre>
enter Foo#bar([123])
123
exit Foo#bar([123])
enter Foo#baz([])
Baz!
exit Foo#baz([])
</pre>

h3. From ruby (deferred loading)

Sometimes you don't know when a class is going to be defined. To solve this,
you must use Minstrel::Instrument#wrap_classname. For example:

<pre>
>> require "minstrel"
>> Minstrel::Instrument.new.wrap_classname("TCPSocket")
>> require "socket"
Wrap of TCPSocket successful
</pre>

Minstrel will wrap 'require' and check for classes you want wrapped at each
require until it finds all the classes you asked to be wrapped.

h2. Caveats

Metaprogramming will not be often caught, necessarily, by minstrel, because they don't
show usuall up as methods. However, the things invoking metaprogramming are
usually methods so in most cases you'll get lucky enough to see what's going
on.

Some cases of metaprogramming (dynamic method generation, DSLs, etc) can be
caught if you call Minstrel::Instrument#wrap() late enough in the lifetime of
the program that the dynamic methods have been created.

h2. Bugs?

If you find bugs, have feature suggestions, etc, feel free to open bugs here on
github (https://github.com/jordansissel/ruby-minstrel/issues). I also read email:
jls@semicomplete.com
